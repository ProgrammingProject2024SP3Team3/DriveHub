@model DriveHub.Models.Dto.BookingDto

@{
    ViewData["Title"] = "Make a booking";
}

<h1>@ViewBag.Title</h1>
<p>Make a new booking for @ViewBag.Vehicle</p>
<div class="mb-3" style="background-color: #f8f9fa;">
    <div class="p-2 fw-bold fs-4" style="background-color: #FFBA17;">
        Booking Details
    </div>
    <div class="d-flex align-items-center mb-3">
        <i class="bi bi-geo-alt-fill fs-2 me-3"></i>
        <div>
            <p class="mb-0">Pickup DriveHub @ViewBag.StartPod</p>
            <small>@ViewBag.StartSite</small>
        </div>
    </div>
</div>
<form asp-action="Create">
    <div class="row">
        <div class="col p-3">
            <label class="form-label">Car</label>
            <div class="form-control">@ViewBag.Vehicle</div>
            <input type="hidden" asp-for="VehicleId" value="@ViewBag.VehicleId" />
            <span asp-validation-for="VehicleId" class="text-danger"></span>
            <a asp-action="Search" class="small text-right mt-1 btn btn-primary">Find another car close by?</a>
        </div>
        <div class="col container-fluid pb-3">
            <img class="img-fluid" src="https://drivehubstorage.blob.core.windows.net/vehicles/@{
                @ViewBag.VehicleId
}.jpg" style="max-width:350px;">
        </div>
    </div>
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <input type="hidden" asp-for="StartPodId" value="@ViewBag.StartPodId" />
    <input type="hidden" asp-for="QuotedPricePerHour" value="@ViewBag.PricePerHour" />
    <div class="row g-3">
        <div class="col-md-6">
            <label asp-for="StartTime" class="control-label">Start time</label>
            <input asp-for="StartTime" class="form-control" id="StartTime" />
            <span asp-validation-for="StartTime" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label asp-for="EndTime" class="control-label">End time</label>
            <input asp-for="EndTime" class="form-control" id="EndTime" />
            <span asp-validation-for="EndTime" class="text-danger"></span>
        </div>
    </div>
    <div class="mt-3">
        <label for="EndPodId" class="control-label">Return Pod</label>
        <select asp-for="EndPodId" class="form-select" id="EndPodId" asp-items="ViewBag.Pods"></select>
        <span asp-validation-for="EndPodId" class="text-danger"></span>
    </div>
    <div class="booking-section mb-3">
        <div class="p-2 fw-bold fs-4" style="background-color: #FFBA17;">Booking Cost</div>
        <div class="cost-section text-center bg-white p-3" style="border: 1px solid #dee2e6;">
            <p class="mb-0">Per Hour:</p>
            <p class="fw-bold fs-1">$<span id="price-per-hour">@ViewBag.PricePerHour.ToString("F2")</span><hr></p>
            <hr />
            <p class="mb-0">Total Cost:</p>
            <p class="fw-bold fs-1 mb-6" id="total-cost">$0</p>
            <span id="time-validation" class="text-danger"></span>
        </div>
    </div>
    <div class="text-center">
        <a asp-action="Search" id="cancel-button" class="btn btn-danger mb-4 fw-bold text-white fs-4">Cancel</a>
        <input type="submit" value="Create" id="create-button" class="d-none btn btn-primary mb-4 fw-bold text-white fs-4" />
    </div>
</form>
<div id="map" style="height: 400px; width: 100%; background-color: #f8f9fa;" class="col-12"></div>

<script>
    // Format the price above to AUD using the locale, style, and currency.
    let AUDollar = new Intl.NumberFormat('en-AU', {
        style: 'currency',
        currency: 'AUD',
    });
    var quotedPricePerHour = @ViewBag.PricePerHour;
    var quotedPrice = 0;
    var startTime;
    var endTime;

    // window.onload = function(){
    document.querySelector('#StartTime').addEventListener('change', function () {
        startTime = this.value;
        console.log(startTime);

        if (endTime != null) {
            var startDateTime = new Date(startTime);
            var endDateTime = new Date(endTime);
            if (endDateTime < startDateTime) {
                document.getElementById("total-cost").classList = "text-danger fw-bold fs-1";
                document.getElementById("total-cost").innerHTML = "$0.00";
                document.getElementById("time-validation").innerHTML = "Start time must be before end time";
                document.getElementById("create-button").classList = "text-center d-none";
                return;
            }
            if (startDateTime < new Date()) {
                document.getElementById("total-cost").classList = "text-danger fw-bold fs-1";
                document.getElementById("total-cost").innerHTML = "$0.00";
                document.getElementById("time-validation").innerHTML = "Start time must be in the future";
                document.getElementById("create-button").classList = "text-center d-none";
                return;
            }
            var diff = Math.abs(new Date(startTime) - new Date(endTime));
            let minutes = Math.floor((diff / 1000) / 60);
            quotedPrice = minutes * quotedPricePerHour / 60;
            console.log("price = " + quotedPrice);
            if (quotedPrice > 0) {
                document.getElementById("total-cost").innerHTML = `${AUDollar.format(quotedPrice)}`;
                document.getElementById("time-validation").innerHTML = "";
                document.getElementById("total-cost").classList = "fw-bold fs-1";
                document.getElementById("create-button").classList = "btn btn-primary mb-4 fw-bold text-white fs-4";
            }
        }
    });

    document.querySelector('#EndTime').addEventListener('change', function () {
        endTime = this.value;
        console.log(endTime);

        if (startTime != null) {
            var startDateTime = new Date(startTime);
            var endDateTime = new Date(endTime);
            if (endDateTime < startDateTime) {
                document.getElementById("total-cost").classList = "text-danger fw-bold fs-1";
                document.getElementById("total-cost").innerHTML = "$0.00";
                document.getElementById("time-validation").innerHTML = "Start time must be before end time";
                document.getElementById("create-button").classList = "text-center d-none";
                return;
            }
            if (startDateTime < new Date()) {
                document.getElementById("total-cost").classList = "text-danger fw-bold fs-1";
                document.getElementById("total-cost").innerHTML = "$0.00";
                document.getElementById("time-validation").innerHTML = "Start time must be in the future";
                document.getElementById("create-button").classList = "text-center d-none";
                return;
            }
            var diff = Math.abs(new Date(startTime) - new Date(endTime));
            let minutes = Math.floor((diff / 1000) / 60);
            quotedPrice = minutes * quotedPricePerHour / 60;
            console.log("price = " + quotedPrice);
            if (quotedPrice > 0) {
                document.getElementById("total-cost").innerHTML = `${AUDollar.format(quotedPrice)}`;
                document.getElementById("time-validation").innerHTML = "";
                document.getElementById("total-cost").classList = "fw-bold fs-1";
                document.getElementById("create-button").classList = "btn btn-primary mb-4 fw-bold text-white fs-4";
            }
        }
    });
</script>
<script>
    function initMap() {
        // Init Google Map
        let map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: @ViewBag.StartSiteLatitude, lng: @ViewBag.StartSiteLongitude },
            zoom: 19,
            mapTypeId: "roadmap",
            mapId: "DRIVEHUB_CREATE"
        });
        new google.maps.marker.AdvancedMarkerElement({
            map,
            title: "Vehicle",
            position: { lat: @ViewBag.StartSiteLatitude, lng: @ViewBag.StartSiteLongitude }
        })
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBRV0yLBAMIA53_1Y3_TW-HD-RPgTDdxc&callback=initMap&v=weekly&libraries=marker,places,geometry&loading=async"
        defer>
</script>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}