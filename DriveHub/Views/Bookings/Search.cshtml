 @model DriveHub.Models.ViewModels.BookingSearchVM;

@{
    ViewData["Title"] = "Let's find a car";
    ViewData["Seats"] = new SelectList(Model.Seats);
    ViewData["Vehicles"] = new SelectList(Model.Pods.ToList().Select(c => c.Vehicle), "VehicleId", "Name");
    ViewData["VehicleRates"] = new SelectList(Model.VehicleRates, "VehicleRateId", "Description");
}


<style>
    .search-link .card {
        transition: transform 0.2s ease, background-color 0.2s ease;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        background-color: #f5f5fa;
    }

    .search-link:hover .card {
        background-color: #e0e0e0; /* Light gray on hover */
        transform: scale(1.02); /* Enlarge on hover */
    }

    .location-icon {
        color: #00A8E8; /* Brand color for the location icon */
        font-size: 1.5rem;
    }

    /* Responsive text in the card */
    .responsive-text {
        font-size: calc(1rem + 0.2vw);
    }

    .booking-search {
        background-color: #f9f9fc;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
    }

    .select-info-box {
        background-color: #FFBA17;
        padding: 10px;
        color: #333;
        font-weight: bold;
        border-radius: 8px;
        font-size: 1.1rem;
        text-align: center;
    }

    .map-container {
        background-color: #e8eaf6;
        border-radius: 8px;
    }
</style>

<div class="booking-search">
    <h1 class="mb-4" style="">Booking Search</h1>
    <div class="row">
        <div class="col-12 mb-3 select-info-box">Select a location or vehicle options to show available cars</div>

        <!-- Input Fields -->
        <div class="col-xs-12 col-md-4">
            <div class="mb-3">
                <label for="pac-input" class="form-label fw-bold responsive-text">Location</label>
                <input id="pac-input" class="form-control" type="text" placeholder="Location" />
            </div>
            <div class="mb-3">
                <label for="seatCountSelect" asp-for="Seats" class="form-label fw-bold responsive-text">Number of Seats</label>
                <select class="form-select" id="seatCountSelect" asp-items="ViewBag.Seats">
                    <option value="any" selected>Any</option>
                </select>
            </div>
            <div class="mb-3">
                <label for="vehicleRatesSelect" asp-for="VehicleRates" class="form-label fw-bold responsive-text">Vehicle category</label>
                <select class="form-select" id="vehicleRatesSelect" asp-items="ViewBag.VehicleRates">
                    <option value="any" selected>Any</option>
                </select>
            </div>
        </div>

        <!-- Map Section -->
        <div class="col mb-4 map-container" id="map" style="height: 400px; width: 100%;"></div>

        <div class="col-12 mb-3 select-info-box">Select a car</div>

        <!-- Full-width Car List Section -->
        <div id="car-list">
            ... Loading
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Wrap with an Immediately Invoked Function Expression (IIFE) so we don't pollute the client
        (function () {
            // The maximum cars to display in the car list below the map
            let MAX_CARS_TO_DISPLAY = 20

            // The raw search data converted to JSON (there is no customer entered data in this)
            // TODO: There is an assumption here that those who can enter Admin data are not trying to hack users, which may be unacceptable. We can manually create nodes and use textContent if admin XSS is a concern.
            let siteData
            // The google map object
            let map;
            // All markers currently placed on the map
            let markers = []
            // The geolocation of the user
            let geolocation = null
            // The geolocation of the user's last location search or click on map
            let searchLocation = null

            // Update the map based on current data
            function updateMap() {
                // Early return if map not yet initialized
                if (!map) return

                // Clear old markers
                for (let i = 0; i < markers.length; i++) markers[i].map = null
                markers = []

                console.log("Map update")
                // The number of seats a user has selected in the drop down
                let seatCount = document.getElementById('seatCountSelect').value

                // Add all sites as markers
                for (let site of siteData) {
                    let marker = new google.maps.marker.AdvancedMarkerElement({
                        map,
                        title: site.SiteName,
                        position: { lat: site.Latitude, lng: site.Longitude },
                    })
                    markers.push(marker)

                    let infowindow = new google.maps.InfoWindow({
                        content: `<p class="fw-bold">${site.SiteName}</p>`
                    })

                    marker.addListener("click", () => {
                        infowindow.open(map, marker)
                    })
                }
                // If a user has a recent searched address put a marker for it on the map
                if (searchLocation) {
                    let pinBackground = new google.maps.marker.PinElement({
                        background: "#00A8E8",
                        glyphColor: "white",
                        borderColor: "#11B8E8"
                    })
                    let marker = new google.maps.marker.AdvancedMarkerElement({
                        map,
                        title: "Your Search Location",
                        position: { lat: searchLocation.lat(), lng: searchLocation.lng() },
                        content: pinBackground.element,
                    })
                    markers.push(marker)
                }
                // Rerender the list of nearest cars beneath the map
                updateAndRenderCarList()
            }

            // Render the list of nearest cars underneath the map
            function updateAndRenderCarList() {
                let sites = [...siteData]
                // If we have a search location, sort all sites by distance to that search location
                if (searchLocation || geolocation) {
                    // Calculate flight distance of site to current searchLocation (in kilometres)
                    for (site of sites) {
                        let sitePos = { lat: site.Latitude, lng: site.Longitude }
                        // calculate the distance between the site and last search location, or the user's geolocation if no searches yet
                        site.distanceInKMs = searchLocation ?
                            (google.maps.geometry.spherical.computeDistanceBetween(searchLocation, sitePos)) / 1000
                            : (google.maps.geometry.spherical.computeDistanceBetween({ lat: geolocation.latitude, lng: geolocation.longitude }, sitePos)) / 1000
                    }
                    // Sort all sites by distance to searchLocation
                    sites.sort((siteA, siteB) => siteA.distanceInKMs - siteB.distanceInKMs)
                }

                let carListHTML = ''
                let totalCarsDisplayed = 0

                // Get the vehicle options selected by the user in drop downs
                let numberOfSeats = document.getElementById('seatCountSelect').value
                let vehicleCategory = document.getElementById('vehicleRatesSelect').selectedOptions[0].text

                // Render a big horrible Raw HTML block for ever nearby car
                // TODO: this is so ugly and it's a prime cleanup candidate once we're feature complete
                for (let siteI = 0; siteI < sites.length && totalCarsDisplayed < MAX_CARS_TO_DISPLAY; siteI++) {
                    let site = sites[siteI]
                    for (let podI = 0; podI < site.Pods.length && totalCarsDisplayed < MAX_CARS_TO_DISPLAY; podI++) {
                        let pod = site.Pods[podI]
                        let car = pod.Vehicle
                        // Skip cars with the wrong number of seats
                        if (numberOfSeats !== 'any' && numberOfSeats != car.Seats) continue
                        // Skip cars that are the wrong vehicle category
                        if (vehicleCategory !== 'Any' && vehicleCategory != car.Category) continue

                        let locationText = `${site.SiteName}, ${site.City}`.toLowerCase().split(' ').map(w => w[0].toUpperCase() + w.substr(1)).join(' ') // format location from db
                        let timeText = ''
                        if (site.distanceInKMs) {
                            timeText += `${(site.distanceInKMs && site.distanceInKMs.toFixed()) || '0'} kms away from `
                        }
                        carListHTML +=
                            `<a class="search-link text-decoration-none" href="/Bookings/Create/${car.VehicleId}">
                                <div class="border-0 shadow-sm mb-3 card">
                                    <div class="row g-0 align-items-center">
                                        <div class="col-12 col-sm-4 col-lg-3 p-3">
                                            <img class="img-fluid rounded w-100 object-fit-cover shadow-sm" src="https://drivehubstorage.blob.core.windows.net/vehicles/${car.VehicleId}.jpg" style="max-width:150px; height:100px;">
                                        </div>
                                        <div class="col-12 col-sm-8 col-lg-9">
                                            <div class="card-body">
                                                <div class="d-flex align-items-center gap-2 mb-3">
                                                    <i class="bi bi-geo-alt fs-5"></i>
                                                    <h5 class="fw-bold mb-0 pt-1">
                                                        ${timeText}${locationText}
                                                    </h5>
                                                </div>

                                                <h5 class="card-title text-primary mb-3 text-dark">${car.Name} the ${car.Make} ${car.Model}</h5>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </a>`
                        totalCarsDisplayed++;
                    }
                }
                document.getElementById('car-list').innerHTML = carListHTML
            }

            // Init the Location search bar for the map
            function initSearchBar(map) {
                // Create the search box and link it to the UI element.
                let input = document.getElementById("pac-input")
                let searchBox = new google.maps.places.SearchBox(input)
                // Bias the SearchBox results towards current map's viewport.
                map.addListener("bounds_changed", () => {
                    searchBox.setBounds(map.getBounds())
                })
                // Respond to user searches and move the map there
                searchBox.addListener("places_changed", () => {
                    let places = searchBox.getPlaces()
                    // Don't change anything if search had 0 results
                    if (places.length == 0) return
                    // Only deal with the first place found
                    let place = places[0]
                    // Don't change anything if there is no geometry for the result
                    if (!place.geometry || !place.geometry.location) {
                        console.log("Returned place contains no geometry")
                        return
                    }
                    // This is the google map viewport bounds
                    let bounds = new google.maps.LatLngBounds()
                    // Update to map bounds is different depending on the type of place returned
                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport)
                    } else {
                        bounds.extend(place.geometry.location)
                    }
                    // Add our first car site to the bounds (only if it exists)
                    if (siteData[0]) {
                        // TODO: this should be the nearest car site instead of just grabbing the first site
                        // This will cause issues if melbourne is no longer the capital site for the company
                        let siteWantedOnMap = siteData[0]
                        bounds.extend(new google.maps.LatLng(siteWantedOnMap.Latitude, siteWantedOnMap.Longitude))
                    }
                    // update our Search Location with coords from Google
                    searchLocation = place.geometry.location
                    // Update the map with this changed searchLocation
                    updateMap()
                    // Fit the map viewport to our created bounds
                    map.fitBounds(bounds)
                })
            }

            // Init geolocation API that will give the user's current location
            function initGeolocation(map) {
                // on successfully getting user's geolocation
                function updatePosition(position) {
                    geolocation = position.coords
                    console.log(position)
                    updateMap()
                }
                function handleError(error) {
                    console.log("Geolocation error: ", error)
                }
                if (navigator.geolocation) {
                    // Start watching the user's position
                    navigator.geolocation.getCurrentPosition(
                        updatePosition,
                        handleError,
                        {
                            enableHighAccuracy: true,
                            timeout: 5000, // Timeout in 5 seconds if geolocation doesn't work
                            maximumAge: 1000 * 60 * 5 // cached results up to 5 minutes old is fine
                        }
                    )
                } else {
                    console.log("Error: No geolocation API enabled in browser")
                }
            }

            // Init a click listener on the map that let's the user choose their search
            function initMapClickListener(map) {
                map.addListener("click", (mapsMouseEvent) => {
                    // Get the latitude and longitude from the click event
                    searchLocation = mapsMouseEvent.latLng
                    updateMap()
                })
            }

            function initAll() {
                console.log(siteData)
                // Init Google Map
                map = new google.maps.Map(document.getElementById("map"), {
                    // Center map on the first site or RMIT if no sites exist
                    center: siteData[0] ? { lat: siteData[0].Latitude, lng: siteData[0].Longitude } : { lat: -37.8083331, lng: 144.9639386 },
                    zoom: 12,
                    mapTypeId: "roadmap",
                    mapId: "DRIVEHUB_SEARCH",
                    streetViewControl: false,
                    clickableIcons: false
                })
                // Init location search bar
                initSearchBar(map)
                // Init Geolocation (user's lat/long from their GPS)
                initGeolocation(map)
                // Init a click listener on the map that let's the user choose their search
                initMapClickListener(map)

                // Update the map whenever the user picks another car option in the drop downs (eg. seat count / vehicle category)
                document.getElementById('seatCountSelect').addEventListener('change', updateMap)
                document.getElementById('vehicleRatesSelect').addEventListener('change', updateMap)

                updateMap()
            }

            // This parses the new Pod API into the form the map currently uses.
            // NOTE: Naming is a bit odd because I originally based this map on C# classes
            function parsePodDataToTreeOfSites(podData) {
                let siteMap = {}
                podData
                    .filter(pod => pod.vehicleId) // filter out empty pods
                    .forEach(pod => { // build a big map of all sites, that contain pods, that contain vehicles
                        if (!siteMap[pod.siteName]) { // if site not yet in map add its details
                            siteMap[pod.siteName] = {
                                SiteName: pod.siteName,
                                Latitude: pod.latitude,
                                Longitude: pod.longitude,
                                Address: pod.address,
                                City: pod.city,
                                PostCode: pod.postCode,
                                Pods: []
                            }
                        }
                        // Add the pod to this site
                        siteMap[pod.siteName].Pods.push({
                            PodId: pod.podId,
                            PodName: pod.podName,
                            // Add the Vehicle to the pod
                            Vehicle: {
                                VehicleId: pod.vehicleId,
                                Name: pod.vehicleName,
                                Make: pod.make,
                                Model: pod.model,
                                RegistrationPlate: pod.registrationPlate,
                                Seats: pod.seats,
                                Colour: pod.colour,
                                PricePerHour: pod.pricePerHour,
                                Category: pod.vehicleCategory
                            }
                        })
                    })
                // Turn map into a simple list as map expects
                let siteTree = []
                for (let siteName in siteMap) siteTree.push(siteMap[siteName])
                console.log(siteTree)
                return siteTree
            }

            function fetchJsonThenInit() {
                fetch('/api/pods')
                    // Get pod data from API and parse it as json
                    .then(function (response) {
                        if (!response.ok) throw new Error('Pods network response not ok: ' + response.statusText)
                        return response.json()
                    }).then(function (json) {
                        // Parse Json pod data into a tree of sites that contain pods, that in turn contain vehicles
                        siteData = parsePodDataToTreeOfSites(json)
                        initAll()
                    }).catch(function (error) {
                        console.log('Error while fetching pods', error)
                    })
            }

            window.initAll = fetchJsonThenInit
        })()
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBRV0yLBAMIA53_1Y3_TW-HD-RPgTDdxc&callback=initAll&v=weekly&libraries=marker,places,geometry&loading=async" defer></script>
}
