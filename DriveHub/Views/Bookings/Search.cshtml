@using System.Text.Json
@{
    ViewData["Title"] = "Let's find a car";

    // Mock Object of all sites, their pods, and what cars are currently rentable
    if (ViewData["SearchData"] == null) {
        ViewData["SearchData"] = new {
            Sites = new[] {
                new { SiteName = "RMIT Snooze Lounge", Address = "445 SWANSTON ST", City = "MELBOURNE", Location = new {longitude = 144.96297733436015, latitude = -37.808207787152966}, Cars = new[] {
                    new { VehicleId = "236d7fac-7e6f-4856-9203-de65bc9e7545", Make = "Tesla", Model = "Model Y", Name = "The Silver Bullet", Seats = 5, Rate = 20.5 },
                    new { VehicleId = "0fbbd18e-bd5b-4f99-a00b-29533d26c3ad", Make = "Toyota", Model = "RAV4", Name = "Thunderbolt", Seats = 5, Rate = 27.5 },
                    new { VehicleId = "0e1769a3-c277-462f-a448-830b76328285", Make = "Toyota", Model = "Hilux", Name = "Vroominator", Seats = 2, Rate = 25.0 }
                }},
                new { SiteName = "United Petroleum West Gate North", Address = "2 WEST GATE FREEWAY", City = "PORT MELBOURNE", Location = new {longitude = 144.95097561347418, latitude = -37.81833347027388}, Cars = new[] {
                    new { VehicleId = "36d4bc1e-6159-46df-ad98-da93a38bcc82", Make = "Toyota", Model = "Hilux", Name = "Shadow Cruiser", Seats = 2, Rate = 20.5 },
                    new { VehicleId = "417b7216-6148-4a40-9458-99db17987790", Make = "Hyundai", Model = "i30", Name = "Stealth Rocket", Seats = 5, Rate = 20.0 }
                }}
            }
        };
    }
}

<style>
    .car-item {
        padding: 10px;
        background-color: #f8f9fa;
        margin-bottom: 10px;
    }
</style>
<h1 class="mb-6 text-center">Booking Search</h1>

<p class="text-center">Select a location and time to show available cars.</p>

<div class="row mb-3">
    <div class="col-md-3">
        <div class="mb-3">
            <label for="pac-input" class="form-label">Location</label>
            <input id="pac-input" class="controls w-100 form-control" type="text" placeholder="Location" />
        </div>

        <div class="mb-3">
            <label for="seatCountSelect" class="form-label">Number of Seats</label>
            <select class="form-select" id="seatCountSelect" disabled>
                <option value ="any" selected>Any</option>
                <option value="2">2</option>
                <option value="5">5</option>
            </select>
        </div>
    </div>
    <div class=" col-md-9">
        <div id="map" style="height: 400px; width: 100%; background-color: #f8f9fa;"></div>
    </div>
</div>

<div id="car-list"></div>

<script>
// Wrap with an Immediately Invoked Function Expression (IIFE) so we don't pollute the client
(function() {
    // The raw search data converted to JSON (there is no customer entered data in this)
    // TODO: There is an assumption here that those who can enter Admin data are not trying to hack users, which may be unacceptable. We can manually create nodes and use textContent if admin XSS is a concern.
    let searchData = @Html.Raw(JsonSerializer.Serialize(ViewData["SearchData"]))
    // The google map object
    let map;
    // All markers currently placed on the map
    let markers = []
    // The geolocation of the user
    let geolocation = null
    // The geolocation of the user's last location search or click on map
    let searchLocation = null

    // Update the map based on current data
    function updateMap() {
        // Early return if map not yet initialized
        if (!map) return

        // Clear old markers
        for (let i = 0; i < markers.length; i++) markers[i].map = null
        markers = []

        console.log("Map update")
        // The number of seats a user has selected in the drop down
        let seatCount = document.getElementById('seatCountSelect').value

        // Add all sites as markers
        for (let site of searchData.Sites) {
            let marker = new google.maps.marker.AdvancedMarkerElement({
                map,
                title: site.SiteName,
                position: { lat: site.Location.latitude, lng: site.Location.longitude },
            })
            markers.push(marker)

            let infowindow = new google.maps.InfoWindow({
                content: `<strong>${site.SiteName} TODO: Big list of cars to book at this site</strong>`
            })

            marker.addListener("click", () => {
                infowindow.open(map, marker)
            })
        }
        // If a user has a recent searched address put a marker for it on the map
        if (searchLocation) {
            let pinBackground = new google.maps.marker.PinElement({
                background: "#00A8E8",
                glyphColor: "white",
                borderColor: "#11B8E8"
            })
            let marker = new google.maps.marker.AdvancedMarkerElement({
                map,
                title: "Your Search Location",
                position: { lat: searchLocation.lat(), lng: searchLocation.lng() },
                content: pinBackground.element,
            })
            markers.push(marker)
        }
        // Rerender the list of nearest cars beneath the map
        updateAndRenderCarList()
    }

    // Render the list of nearest cars underneath the map
    function updateAndRenderCarList() {
        let sites = [...searchData.Sites]
        // If we have a search location, sort all sites by distance to that search location
        if (searchLocation) {
            // Calculate flight distance of site to current searchLocation (in kilometres)
            for (site of sites) {
                let sitePos = { lat: site.Location.latitude, lng: site.Location.longitude }
                site.distanceInKMs = (google.maps.geometry.spherical.computeDistanceBetween(searchLocation, sitePos)) / 1000
            }
            // Sort all sites by distance to searchLocation
            sites.sort((siteA, siteB) => siteA.distanceInKMs - siteB.distanceInKMs)
        }
        
        let carListHTML = ''
        for (site of sites) {
            for (car of site.Cars) {
                let locationText = `${site.Address}, ${site.City}`.toLowerCase().split(' ').map(w => w[0].toUpperCase() + w.substr(1)).join(' ') // format location from db
                let timeText = ''
                if (site.distanceInKMs) {
                    let kmph = 40 // kilometers per hour
                    let timeInMinutes = 3 + site.distanceInKMs / kmph * 60
                    if (site.distanceInKMs <= 100) {
                        timeText += `Around ${(timeInMinutes && timeInMinutes.toFixed()) || '0'} mins (${(site.distanceInKMs && site.distanceInKMs.toFixed()) || '0'} kms) away from `
                    } else {
                        timeText += `${(site.distanceInKMs && site.distanceInKMs.toFixed()) || '0'} kms away from `
                    }
                }
                carListHTML +=
`<div class="car-item d-flex align-items-center">
    <div class="car-icon me-3">ðŸš—</div>
    <div>
        <p class="mb-0"><strong>${timeText}${locationText}</strong></p>
        <p class="mb-0">${car.Name} the ${car.Make} ${car.Model}</p>
    </div>
    <a class="btn confirm-btn fw-bold text-white ms-auto" style="background-color: #00A8E8;" href="/Bookings/Create">></a>
</div>`
            }
        }
        document.getElementById('car-list').innerHTML = carListHTML
    }

    // Init the Location search bar for the map
    function initSearchBar(map) {
        // Create the search box and link it to the UI element.
        let input = document.getElementById("pac-input")
        let searchBox = new google.maps.places.SearchBox(input)
        // Bias the SearchBox results towards current map's viewport.
        map.addListener("bounds_changed", () => {
            searchBox.setBounds(map.getBounds())
        })
        // Respond to user searches and move the map there
        searchBox.addListener("places_changed", () => {
            let places = searchBox.getPlaces()
            // Don't change anything if search had 0 results
            if (places.length == 0) return
            // Only deal with the first place found
            let place = places[0]
            // Don't change anything if there is no geometry for the result
            if (!place.geometry || !place.geometry.location) {
                console.log("Returned place contains no geometry")
                return
            }
            // This is the google map viewport bounds
            let bounds = new google.maps.LatLngBounds()
            // Update to map bounds is different depending on the type of place returned
            if (place.geometry.viewport) {
                // Only geocodes have viewport.
                bounds.union(place.geometry.viewport)
            } else {
                bounds.extend(place.geometry.location)
            }
            // Add our first car site to the bounds (only if it exists)
            if (searchData.Sites && searchData.Sites[0]) {
                // TODO: this should be the nearest car site instead of just grabbing the first site
                // This will cause issues if melbourne is no longer the capital site for the company
                let siteWantedOnMap = searchData.Sites[0].Location
                bounds.extend(new google.maps.LatLng(siteWantedOnMap.latitude, siteWantedOnMap.longitude))
            }
            // update our Search Location with coords from Google
            searchLocation = place.geometry.location
            // Update the map with this changed searchLocation
            updateMap()
            // Fit the map viewport to our created bounds
            map.fitBounds(bounds)
        })
    }

    // Init geolocation API that will give the user's current location
    function initGeolocation(map) {
        // on successfully getting user's geolocation
        function updatePosition(position) {
            geolocation = position.coords
            console.log(position)
            updateMap()
        }
        function handleError(error) {
            console.log("Geolocation error: ", error)
        }
        if (navigator.geolocation) {
            // Start watching the user's position
            navigator.geolocation.getCurrentPosition(
                updatePosition,
                handleError,
                {
                    enableHighAccuracy: true,
                    timeout: 5000, // Timeout in 5 seconds if geolocation doesn't work
                    maximumAge: 1000 * 60 * 5 // cached results up to 5 minutes old is fine
                }
            )
        } else {
            console.log("Error: No geolocation API enabled in browser")
        }
    }

    // Init a click listener on the map that let's the user choose their search
    function initMapClickListener(map) {
        map.addListener("click", (mapsMouseEvent) => {
            // Get the latitude and longitude from the click event
            searchLocation = mapsMouseEvent.latLng
            updateMap()
        })
    }

    function initAll() {
        console.log(searchData)
        // Init Google Map
        map = new google.maps.Map(document.getElementById("map"), {
            center: { lat: -37.8083331, lng: 144.9639386 },
            zoom: 13,
            mapTypeId: "roadmap",
            mapId: "DRIVEHUB_MAP",
            streetViewControl: false,
            clickableIcons: false
        })
        // Init location search bar
        initSearchBar(map)
        // Init Geolocation (user's lat/long from their GPS)
        initGeolocation(map)
        // Init a click listener on the map that let's the user choose their search
        initMapClickListener(map)

        // Update the map whenever the user picks another seat count
        document.getElementById('seatCountSelect').addEventListener('change', updateMap)

        updateMap()
    }

    window.initAll = initAll
})()
</script>
<script
src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBBRV0yLBAMIA53_1Y3_TW-HD-RPgTDdxc&callback=initAll&v=weekly&libraries=marker,places,geometry&loading=async"
defer
></script>
